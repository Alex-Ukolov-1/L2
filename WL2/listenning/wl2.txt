1
package main

import (
	"fmt"
)

func main() {
	a := [5]int{76, 77, 78, 79, 80}
	var b []int = a[1:4]
	fmt.Println(b)
}

-выведет срез/слайс массива а от 1 до 4 элемента
[77.77.78]
-------------------------------------------------

2
package main

import (
	"fmt"
)

func test() (x int) {
	defer func() {
		x++
	}()
	x = 1
	return
}
func anotherTest() int {
	var x int
	defer func() {
		x++
	}()
	x = 1
	return x
}
func main() {
	fmt.Println(test())
	fmt.Println(anotherTest())
}
В первом фрагменте кода, поскольку нет именованного параметра результата, отложенная функция не может влиять на то,
 что возвращается заключающей функцией (тест). См. спецификацию: если отложенная функция является литералом функции,
 а окружающая функция имеет именованные параметры результата, которые находятся в области действия в литерале,
 отложенная функция может получить доступ и изменить параметры результата до их возврата.

------------------------------------------------
3

package main

import (
	"fmt"
	"os"
)

func Foo() error {
	var err *os.PathError = nil
	return err
}
func main() {
	err := Foo()
	fmt.Println(err)
	fmt.Println(err == nil)
}


Значение интерфейса равно nil, только если его значение и динамический тип равны nil. В приведенном выше примере Foo() возвращает [nil, *os.PathError], и мы сравниваем его с [nil, nil].
Вы можете думать о значении интерфейса nil как о типизированном, и nil без типа не равен nil с типом. Если мы конвертируем nil в правильный тип, значения действительно равны.
…
fmt.Println(err == (*os.PathError)(nil)) // true
…
-----------------------------------------------------------------------------------
4
package main

import (
	"fmt"
)

func main() {
	ch := make(chan int)
	go func() {
		for i := 0; i < 10; i++ {
			ch <- i
		}
		//close(ch)
	}()

	for n := range ch {
		fmt.Println(n)
	}

}
-нет закрытия канала , выведет числа с 0  до 10 , а потом deadblock gorutine asleep
запись в канал не закрыта
--------------------------------------------------------------------------------

5
package main

type customError struct {
	msg string
}

func (e *customError) Error() string {
	return e.msg
}
func test() *customError {
	{
		// do something
	}
	return nil
}
func main() {
	var err error
	err = test()
	if err != nil {
		println("error")
		return
	}
	println("ok")
}
-
-этот пример демонстрирует что в golang есть встроенный интерфейс Error
который помогает при тестировки ошибок , в данном случае 
переменная err - тип интерфейса , который под капотом выполняет функцию error 
однако err - будет типом *customerror nil , а не просто nil
---------------------------------------------------------------------------
6
package main

import (
	"fmt"
)

func main() {
	var s = []string{"1", "2", "3"}
	modifySlice(s)
	fmt.Println(s)
}

func modifySlice(i []string) {
	i[0] = "3"
	i = append(i, "4")
	i[1] = "5"
	i = append(i, "6")
}
-выведет [3 2 3] . Ничего не добавляется потому что это не срезы , а массивы!
а 5 не просталяется , потому что функция append мешает
---------------------------------------------------------------------------


7
package main

import (
	"fmt"
	"math/rand"
	"time"
)

func asChan(vs ...int) <-chan int {
	c := make(chan int)
	go func() {
		for _, v := range vs {
			c <- v
			time.Sleep(time.Duration(rand.Intn(1000)) *
				time.Millisecond)
		}
		close(c)
	}()
	return c
}
func merge(a, b <-chan int) <-chan int {
	c := make(chan int)
	go func() {
		for {
			select {
			case v := <-a:
				c <- v
			case v := <-b:
				c <- v
			}
		}
	}()
	return c
}
func main() {
	a := asChan(1, 3, 5, 7)
	b := asChan(2, 4, 6, 8)
	c := merge(a, b)
	for v := range c {
		fmt.Println(v)
	}
}
-------------------------------------------
-выведет числа от 1 до 8 , а потом будет выводить бесконечное 
колличество нулей
-ИЗ ЗА ЦИКЛА FOR ВСЁ ПОЙДЁТ ПО ВЕЧНОМУ ВОЗВРАЩЕНИЮ НУЛЯ

Такое будет происходить потому, что чтение из закрытого канала будет выводить 
zero value типа канала и false вторым значением, обозначая, что канал закрыт. 
Так как нет проверки на состояние каналов, в функуции merge происходит постоянное чтение закрытых каналов.